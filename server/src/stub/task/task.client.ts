// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "task/task.proto" (package "task", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TaskService } from "./task";
import type { DeleteResponse } from "./task";
import type { DeleteRequest } from "./task";
import type { UpdateResponse } from "./task";
import type { UpdateRequest } from "./task";
import type { CreateResponse } from "./task";
import type { CreateRequest } from "./task";
import type { FindByIdResponse } from "./task";
import type { FindByIdRequest } from "./task";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { FindAllResponse } from "./task";
import type { FindAllRequest } from "./task";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service task.TaskService
 */
export interface ITaskServiceClient {
    /**
     * @generated from protobuf rpc: FindAll(task.FindAllRequest) returns (task.FindAllResponse);
     */
    findAll(input: FindAllRequest, options?: RpcOptions): UnaryCall<FindAllRequest, FindAllResponse>;
    /**
     * @generated from protobuf rpc: FindById(task.FindByIdRequest) returns (task.FindByIdResponse);
     */
    findById(input: FindByIdRequest, options?: RpcOptions): UnaryCall<FindByIdRequest, FindByIdResponse>;
    /**
     * @generated from protobuf rpc: Create(task.CreateRequest) returns (task.CreateResponse);
     */
    create(input: CreateRequest, options?: RpcOptions): UnaryCall<CreateRequest, CreateResponse>;
    /**
     * @generated from protobuf rpc: Update(task.UpdateRequest) returns (task.UpdateResponse);
     */
    update(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, UpdateResponse>;
    /**
     * @generated from protobuf rpc: Delete(task.DeleteRequest) returns (task.DeleteResponse);
     */
    delete(input: DeleteRequest, options?: RpcOptions): UnaryCall<DeleteRequest, DeleteResponse>;
}
/**
 * @generated from protobuf service task.TaskService
 */
export class TaskServiceClient implements ITaskServiceClient, ServiceInfo {
    typeName = TaskService.typeName;
    methods = TaskService.methods;
    options = TaskService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: FindAll(task.FindAllRequest) returns (task.FindAllResponse);
     */
    findAll(input: FindAllRequest, options?: RpcOptions): UnaryCall<FindAllRequest, FindAllResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<FindAllRequest, FindAllResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FindById(task.FindByIdRequest) returns (task.FindByIdResponse);
     */
    findById(input: FindByIdRequest, options?: RpcOptions): UnaryCall<FindByIdRequest, FindByIdResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<FindByIdRequest, FindByIdResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Create(task.CreateRequest) returns (task.CreateResponse);
     */
    create(input: CreateRequest, options?: RpcOptions): UnaryCall<CreateRequest, CreateResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRequest, CreateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(task.UpdateRequest) returns (task.UpdateResponse);
     */
    update(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, UpdateResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateRequest, UpdateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(task.DeleteRequest) returns (task.DeleteResponse);
     */
    delete(input: DeleteRequest, options?: RpcOptions): UnaryCall<DeleteRequest, DeleteResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRequest, DeleteResponse>("unary", this._transport, method, opt, input);
    }
}
